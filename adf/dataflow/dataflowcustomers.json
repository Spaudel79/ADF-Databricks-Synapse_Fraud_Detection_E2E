{
	"name": "dataflowcustomers",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dataset_for_dataflow_customer",
						"type": "DatasetReference"
					},
					"name": "customersource"
				},
				{
					"dataset": {
						"referenceName": "dataset_onprem_sales_source_after_dataflow",
						"type": "DatasetReference"
					},
					"name": "salessource"
				},
				{
					"dataset": {
						"referenceName": "dataset_for_dataflow_products_source",
						"type": "DatasetReference"
					},
					"name": "productssource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dataset_azuresql_sink_customer",
						"type": "DatasetReference"
					},
					"name": "Customersink"
				},
				{
					"dataset": {
						"referenceName": "dataset_azuresql_sink_sales",
						"type": "DatasetReference"
					},
					"name": "salessink"
				},
				{
					"dataset": {
						"referenceName": "dataset_for_sink_products_on_azuresql",
						"type": "DatasetReference"
					},
					"name": "productssink"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "window1"
				},
				{
					"name": "rank1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerName as string,",
				"          Email as string,",
				"          Phone as string,",
				"          City as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customersource",
				"source(output(",
				"          CustomerID as string,",
				"          ProductID as string,",
				"          SaleDate as string,",
				"          Quantity as string,",
				"          TotalAmount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> salessource",
				"source(output(",
				"          ProductName as string,",
				"          Category as string,",
				"          Price as string,",
				"          StockQuantity as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> productssource",
				"customersource derive(Country = iif(isNull(Country) || Country == '', toString(null()), upper(Country)),",
				"          City = iif(isNull(City) || City == '', toString(null()), upper(City))) ~> derivedColumn1",
				"salessource derive(SaleDate = toString(toDate(SaleDate, 'M/d/yyyy'), 'yyyy-MM-dd'),",
				"          TotalAmount = round(toFloat(TotalAmount), 3),",
				"          ProductID = iif(isNull(ProductID) || ProductID == '', toInteger(null()), toInteger(ProductID)),",
				"          CustomerID = iif(isNull(CustomerID) || CustomerID == '', toInteger(null()), toInteger(CustomerID))) ~> derivedColumn2",
				"productssource derive(Category = upper(Category)) ~> derivedColumn3",
				"derivedColumn3 window(over(Category),",
				"     TotalQuantityByCategory = sum(toInteger(StockQuantity))) ~> window1",
				"derivedColumn2 rank(desc(Quantity, true),",
				"     output(QuantityRank as long)) ~> rank1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     preCommands: [],",
				"     postCommands: []) ~> Customersink",
				"rank1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     preCommands: [],",
				"     postCommands: []) ~> salessink",
				"window1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     preCommands: [],",
				"     postCommands: []) ~> productssink"
			]
		}
	}
}